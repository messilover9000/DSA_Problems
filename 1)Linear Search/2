/*Given a List of Distinct N number a1,a2,a3........an.

Find The Position Of Number K In The Given List.

Input Format

First Line Take Input Value Of N
Second Line Take Input N Space Separated Integer Value
Third Line Take Input Value Of K

Constraints
0 < N < 100001
0 < ai < 10^10
0 < K < 10^10

Output Format

Position Of K In The Given List.
Print -1 if element is not found.
*/

#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

int findPositionOfK(const vector<long long>& arr, long long k) {
    // Create a hash map to store the element and its position
    unordered_map<long long, int> positionMap;
    for (int i = 0; i < arr.size(); ++i) {
        positionMap[arr[i]] = i + 1; // Store 1-based position
    }

    // Check if K exists in the map
    if (positionMap.find(k) != positionMap.end()) {
        return positionMap[k];
    } else {
        return -1; // Return -1 if K is not in the list
    }
}

int main() {
    int n;
    cout << "Enter the size of the list: ";
    cin >> n;

    // Validate constraints
    if (n <= 0 || n >= 100001) {
        cout << "Invalid size!" << endl;
        return 0;
    }

    vector<long long> arr(n);
    cout << "Enter the numbers: ";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
        if (arr[i] <= 0 || arr[i] >= 10000000000LL) {
            cout << "Invalid number in the list!" << endl;
            return 0;
        }
    }

    long long k;
    cout << "Enter the number to find: ";
    cin >> k;

    if (k <= 0 || k >= 10000000000LL) {
        cout << "Invalid K!" << endl;
        return 0;
    }

    // Find the position of K
    int position = findPositionOfK(arr, k);
    if (position != -1) {
        cout << "Position of " << k << " is: " << position << endl;
    } else {
        cout << k << " is not in the list!" << endl;
    }

    return 0;
}
